package main

import (
	"encoding/json"
	"fmt"
	"github.com/bitrise-io/go-utils/log"
	"github.com/bitrise-tools/go-steputils/stepconf"
	"io/ioutil"
	"os"
	"strings"
)

type AutoGenerated []struct {
	Key              string   `json:"key"`
	Modules          []string `json:"modules"`
	SlackResponsible []string `json:"slack_responsible"`
}

type Config struct {
	Folders           string `env:"folders,required"`
	PathConfiguration string `env:"path_configuration,required"`
}

func main() {
	var cfg Config
	if err := stepconf.Parse(&cfg); err != nil {
		failf("Issue with input: %s", err)
	}
	fmt.Printf("The Path configuration is %s\n", cfg.PathConfiguration)
	var arregloDeCarpetas = strings.Fields(cfg.Folders)

	for i := 0; i < len(arregloDeCarpetas); i++ {
		fmt.Printf("The Folder is %s\n", arregloDeCarpetas[i])
	}

	file, _ := ioutil.ReadFile(cfg.PathConfiguration)

	data := AutoGenerated{}

	_ = json.Unmarshal(file, &data)

	for i := 0; i < len(data); i++ {
		fmt.Println("Key: ", data[i].Key)
	}

	for i := 0; i < len(arregloDeCarpetas); i++ {
		fmt.Println("Folder two: ", arregloDeCarpetas[i])
	}

	// You can find more usage examples on envman's GitHub page
	//  at: https://github.com/bitrise-io/envman

	//
	// --- Exit codes:
	// The exit code of your Step is very important. If you return
	//  with a 0 exit code `bitrise` will register your Step as "successful".
	// Any non zero exit code will be registered as "failed" by `bitrise`.
	os.Exit(0)
}

func failf(format string, v ...interface{}) {
	log.Errorf(format, v...)
	os.Exit(1)
}
